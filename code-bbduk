#!/usr/bin/env nextflow

//Lets define pipeline parameters in order to specify the refence genome
//and read pairs by using the command line options

 params.reads = "./*_{R1,R2}.fastq"
 params.genome = "/proj/b2016371/src/bbmap/resources/adapters.fa"

//Create a channel for the reference genome file
 genome_file = file(params.genome)


//Creates the `read_pairs` channel that emits for each read-pair a tuple containing
//three elements: the pair ID, the first read-pair file and the second read-pair file

 Channel
    .fromFilePairs( params.reads )
    .ifEmpty { error "Cannot find any reads matching: ${params.reads}" }
    .set { read_pairs }

//process 1: Adapter and quality trimming

 process bbduk {
        tag {pair_id}
        publishDir './genomes_bbduktestfinal'

        input:
        set pair_id, file(reads) from read_pairs
        file genome_file

        output:
        set pair_id, file("*.bbduk.fastq") into fastqc_input, spades_input
        file "${pair_id}.stats.txt"
        script:
        """
        bbduk.sh -Xmx1g \
             in1=${reads[0]} \
             in2=${reads[1]} \
             ref=${genome_file} \
             out1=${reads[0].baseName}.bbduk.fastq \
             out2=${reads[1].baseName}.bbduk.fastq \
             stats=${pair_id}.stats.txt \
             minlen=30 \
             qtrim=rl \
             trimq=10 \
             ktrim=r \
             k=30 \
             mink=11 \
             hdist=1 \
             trimbyoverlap \
             trimpairsevenly \
        """

 }
 // STEP 2 - FastQC

process fastqc {

                tag "$name"
                publishDir './fastqc_results'
                module 'bioinfo-tools:FastQC'

                input:
                set val(name), file(clean_reads) from fastqc_input

                output:

                file "*_fastqc.{zip,html}" into fastqc_output


                """

                fastqc --quiet ${clean_reads}

                """

}

